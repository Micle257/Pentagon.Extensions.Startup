<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Authors>Michal Pokorný</Authors>
    <Product>Pentagon.Extensions.Startup</Product>
    <Description>Provides startup pattern similar to ASP.NET Core logic.</Description>
    <Copyright>Copyright (c) Michal Pokorný. All Rights Reserved.</Copyright>
    <PackageTags>net netstandard</PackageTags>
    <PackageProjectUrl>https://github.com/Micle257/Pentagon.Extensions.Startup</PackageProjectUrl>
    <PackageLicenseUrl>https://raw.githubusercontent.com/Micle257/Pentagon.Extensions.Startup/dev/LICENSE</PackageLicenseUrl>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <Version>1.3.0</Version>
    <LangVersion>7.3</LangVersion>
    <NeutralLanguage>en-US</NeutralLanguage>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <OutputPath>..\..\build\$(AssemblyName)\</OutputPath>
    <DocumentationFile>..\..\build\$(AssemblyName)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <OutputPath>..\..\debug\$(AssemblyName)\</OutputPath>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="JetBrains.Annotations" Version="2019.1.1" PrivateAssets="All" />
    <PackageReference Include="Microsoft.Extensions.Configuration" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Abstractions" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.EnvironmentVariables" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Logging" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Configuration" Version="2.2.0" />
    <PackageReference Include="Pentagon.Extensions.Logging" Version="1.0.2" />
  </ItemGroup>

  <PropertyGroup>
    <ReplacePackageReferences Condition="'$(ReplacePackageReferences)' == ''">true</ReplacePackageReferences>
    <ReplaceProjectReferences Condition="'$(ReplaceProjectReferences)' == ''">true</ReplaceProjectReferences>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(SolutionPath)' != '' AND '$(SolutionPath)' != '*undefined*' AND Exists('$(SolutionPath)')">
      <PropertyGroup>
        <SolutionFileContent>$([System.IO.File]::ReadAllText($(SolutionPath)))</SolutionFileContent>
        <SmartSolutionDir>$([System.IO.Path]::GetDirectoryName( $(SolutionPath) ))</SmartSolutionDir>
        <RegexPattern>(?&lt;="[PackageName]", ")(.*)(?=", ")</RegexPattern>
        <HasSolution>true</HasSolution>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <HasSolution>false</HasSolution>
      </PropertyGroup>
    </Otherwise>
  </Choose>
  <Choose>
    <When Condition="$(ReplacePackageReferences) AND $(HasSolution)">
      <ItemGroup>
        <!-- Keep the identity of the  packagereference -->
        <SmartPackageReference Include="@(PackageReference)">
          <PackageName>%(Identity)</PackageName>
          <InSolution>$(SolutionFileContent.Contains('\%(Identity).csproj'))</InSolution>
        </SmartPackageReference>

        <!-- Filter them by mapping them to another itemGroup using the WithMetadataValue item function -->
        <PackageInSolution Include="@(SmartPackageReference -&gt; WithMetadataValue('InSolution', True) )">
          <Pattern>$(RegexPattern.Replace('[PackageName]','%(PackageName)') )</Pattern>
          <SmartPath>$([System.Text.RegularExpressions.Regex]::Match( '$(SolutionFileContent)', '%(Pattern)' ))</SmartPath>
        </PackageInSolution>

        <!-- <ProjectReference  Include="@(PackageInSolution -> '$(SmartSolutionDir)\%(SmartPath)' )"/> -->
        <ProjectReference Include="@(PackageInSolution -> '$(SmartSolutionDir)\%(SmartPath)' )">
          <Name>@(PackageInSolution -&gt; %(PackageName))</Name>
        </ProjectReference>

        <!-- Remove the package references that are now referenced as projects -->
        <PackageReference Remove="@(PackageInSolution -> '%(PackageName)' )" />
      </ItemGroup>
    </When>
    <When Condition="$(ReplaceProjectReferences) AND '$(_RestoreSolutionFileUsed)' == ''">
      <ItemGroup>

        <!-- Keep the identity of the  project reference (relative path), determine the project name and whether the project is contained in the current solution -->
        <SmartProjectReference Include="@(ProjectReference)">
          <OriginalIdentity>%(Identity)</OriginalIdentity>
          <ProjectName>$([System.IO.Path]::GetFileNameWithoutExtension( $([System.IO.Path]::GetFullPath( '%(OriginalIdentity)' )) ))</ProjectName>
          <InSolution>$(SolutionFileContent.Contains('\%(ProjectName).csproj'))</InSolution>
        </SmartProjectReference>

        <!-- Filter them by mapping them to another itemGroup using the WithMetadataValue item function -->
        <ProjectNotInSolution Include="@(SmartProjectReference -&gt; WithMetadataValue('InSolution', False) )">
        </ProjectNotInSolution>

        <!--Reference the latest version of the package (why not * ? > see https://github.com/NuGet/Home/issues/7328-->
        <PackageReference Include="@(ProjectNotInSolution -> '%(ProjectName)' )" Version="[*,9999.0]" />

        <!-- Remove the project references that are now referenced as packages -->
        <ProjectReference Remove="@(ProjectNotInSolution -> '%(OriginalIdentity)' )" />
      </ItemGroup>

    </When>
  </Choose>

</Project>
